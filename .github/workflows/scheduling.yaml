name: "Scheduling"

on:
  #schedule:
  #  cron: xxxx

  workflow_run:
    workflows: [Workload]
    types: [completed]
#    branches:
#      - yet-another-branch
#      - and-yet-another-branch

  workflow_dispatch:

jobs:
  scheduler:
#    if: ${{ !github.event.workflow_run
#            || github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    permissions:
      actions: write
    steps:
      - name: Run C/D on yet-another-branch
        uses: actions/github-script@v3.1.0
        #if: ${{ github.event.workflow_run.head_branch == 'yet-another-branch' }}
        with:
          script: |
            const branchesToService = ["main", "release"];

            const workloadWorkflow = "workload.yaml";

            const activeWorkflowRunListResponse = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: workloadWorkflow,
              per_page: 10,
              exclude_pull_requests: true,
              status: [ "action_required", "in_progress", "queued", "requested", "waiting", "pending" ]
            });

            console.log(
              "keys of activeWorkflowRunListResponse=",
              JSON.stringify(Object.keys(activeWorkflowRunListResponse)));

            console.log(
              "keys of activeWorkflowRunListResponse.data=",
              JSON.stringify(Object.keys(activeWorkflowRunListResponse.data)));

            console.log(
              "activeWorkflowRunListResponse.count=",
              activeWorkflowRunListResponse.data.count);

            if (activeWorkflowRunListResponse.data.count == 0) {
              console.log("terminating: " + activeWorkflowRunListResponse.data.count + " runs still active")
              return 0;
            }

            const completedWorkflowRunListResponse =
              await github.rest.actions.listWorkflowRuns({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: workloadWorkflow,
                per_page: branchesToService.length,
                exclude_pull_requests: true,
                status: [ "completed", "cancelled", "failure", "neutral", "skipped", "stale", "success", "timed_out" ]
              });

            const lastServicedBranches =
              completedWorkflowRunListResponse.data.workflow_runs.data.workflow_runs.map(
                wr => wr.head_branch);

            console.log("branchesToService" + JSON.stringify(branchesToService));

            console.log("lastServicedBranches=" + JSON.stringify(lastServicedBranches));

            let nextBranchToService = null;
            for (const b in branchesToService) {
              if (a.indexOf(b) < 0) {
                nextBranchToService = b;
                break;
              }
            }

            console.log("scheduling next branch to run: "+ nextBranchToService);

            if (nextBranchToService) {
              await github.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: workloadWorkflow,
                ref: nextBranchToService
              });
            }
