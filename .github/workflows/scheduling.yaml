name: "Scheduling"
run-name: "Scheduling (${{ github.ref_name }})"

on:
  #schedule:
  #  cron: xxxx

  workflow_run:
    workflows: [Workload]
    types: [completed]
#    branches:
#      - yet-another-branch
#      - and-yet-another-branch

  workflow_dispatch:

  push:
    branches:
      - main

jobs:
  scheduler:
#    if: ${{ !github.event.workflow_run
#            || github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    permissions:
      actions: write
    steps:
      - name: Run C/D on yet-another-branch
        uses: actions/github-script@v6
        #if: ${{ github.event.workflow_run.head_branch == 'yet-another-branch' }}
        with:
          debug: true
          script: |
            const branchesToService = ["main", "release"];

            const workloadWorkflow = "workload.yaml";

            const activeWorkflowRunListResponse = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: workloadWorkflow,
              per_page: 0,
              exclude_pull_requests: true,
              status: "action_required,in_progress,queued,requested,waiting,pending"
            });

            console.log(
              "activeWorkflowRunListResponse.data.total_count=",
              activeWorkflowRunListResponse.data.total_count);

            if (activeWorkflowRunListResponse.data.total_count > 0) {
              console.log("terminating: " + activeWorkflowRunListResponse.data.total_count + " runs still active")
              return 0;
            }

            console.log("branchesToService" + JSON.stringify(branchesToService));

            const allCompletedWorkflowRunListResponse =
              await github.rest.actions.listWorkflowRuns({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: workloadWorkflow,
                per_page: branchesToService.length,
                exclude_pull_requests: true,
                status: ["completed","cancelled","failure","neutral","skipped","stale","success","timed_out"]
              });

            const allLastServicedBranches =
              allCompletedWorkflowRunListResponse.data.workflow_runs.map(
                wr => wr.head_branch);

            console.log("allLastServicedBranches=" + JSON.stringify(allLastServicedBranches));

            console.log("github=" + JSON.stringify(Object.keys(github)));
            console.log("github.rest=" + JSON.stringify(Object.keys(github.rest)));
            console.log("github.request=" + JSON.stringify(Object.keys(github.request)));

            console.log("process.env=", JSON.stringify(Object.keys(process.env)));

            const newCompletedWorkflowRunListResponse =
              await github.request(
                "GET /repos/razzmatazz/gh-actions-playground/actions/workflows/workload.yaml/runs",
                {
                  url: `/repos/razzmatazz/gh-actions-playground/actions/workflows/workload.yaml/runs`
                      + `?per_page=2`
                      + `&exclude_pull_requests=true`
                      + `&status=completed&status=cancelled&status=failure&status=neutral&status=skipped&status=stale&status=success&status=timed_out`
                }
              );

            console.log("newCompletedWorkflowRunListResponse.keys=" + JSON.stringify(Object.keys(newCompletedWorkflowRunListResponse)));

            const newLastServicedBranches =
              newCompletedWorkflowRunListResponse.data.workflow_runs.map(
                wr => wr.head_branch);

            console.log("newLastServicedBranches=" + JSON.stringify(newLastServicedBranches));

            const completedWorkflowRunListResponse =
              await github.rest.actions.listWorkflowRuns({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: workloadWorkflow,
                per_page: branchesToService.length,
                exclude_pull_requests: true,
                status: "completed"
              });

            const lastServicedBranches =
              completedWorkflowRunListResponse.data.workflow_runs.map(
                wr => wr.head_branch);

            console.log("lastServicedBranches=" + JSON.stringify(lastServicedBranches));

            let nextBranchToService = null;
            for (const b of branchesToService) {
              if (lastServicedBranches.indexOf(b) < 0) {
                nextBranchToService = b;
                break;
              }
            }

            console.log(nextBranchToService);

            if (nextBranchToService) {
              console.log("scheduling a run to service next branch: " + nextBranchToService);

              await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: workloadWorkflow,
                ref: nextBranchToService
              });
            }
