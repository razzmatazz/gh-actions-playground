inputs:
  workflow_id:
    type: string
    description: "filename of the workflow, i.e. 'test-nightly.yaml'"
    required: true

  branches:
    type: string
    description: "comma-separated list of branches"
    required: true

runs:
  using: "composite"

  steps:
    - uses: actions/github-script@v6
      with:
        script: |
          const workloadWorkflow = "${{ inputs.workflow_id }}";
          const branchesToService = "${{ inputs.branches }}".split(',').map(x => x.trim())

          const inProgressWorkflowRunListResponse = await github.rest.actions.listWorkflowRuns({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: workloadWorkflow,
            per_page: 0,
            exclude_pull_requests: true,
            status: "in_progress"
          });

          const queuedWorkflowRunListResponse = await github.rest.actions.listWorkflowRuns({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: workloadWorkflow,
            per_page: 0,
            exclude_pull_requests: true,
            status: "queued"
          });

          const activeWorkflowRunCount =
            inProgressWorkflowRunListResponse.data.total_count
            + queuedWorkflowRunListResponse.data.total_count;

          if (activeWorkflowRunCount) {
            console.log(
              `terminating: ${inProgressWorkflowRunListResponse.data.total_count} workflow runs "in_progress", `
              + `${queuedWorkflowRunListResponse.data.total_count} "queued"`);

            return 0;
          }

          console.log("branchesToService" + JSON.stringify(branchesToService));

          const completedWorkflowRunListResponse =
            await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: workloadWorkflow,
              per_page: branchesToService.length,
              exclude_pull_requests: true,
              status: "completed"
            });

          const completedWorkflowRuns = completedWorkflowRunListResponse.data.workflow_runs;

          let nextBranchToService = null;
          for (const b of branchesToService) {
            const lastRunForBranch = completedWorkflowRuns.find(wr => wr.head_branch == b);
            if (!lastRunForBranch) {
              console.log(lastRunForBranch: " + JSON.stringify(lastRunForBranch));
              nextBranchToService = b;
              break;
            }
          }

          if (nextBranchToService == null) {
            nextBranchToService = completedWorkflowRuns[completedWorkflowRuns.length-1].head_branch;
          }

          if (nextBranchToService) {
            console.log(`scheduling a new ${workloadWorkflow} workflow run to service \"${nextBranchToService}\"`);

            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: workloadWorkflow,
              ref: nextBranchToService
            });
          }
