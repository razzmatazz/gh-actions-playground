inputs:
  workflow_id:
    type: string
    description: "filename of the workflow, i.e. 'test-nightly.yaml'"
    required: true

  branches:
    type: string
    description: "comma-separated list of branches"
    required: true

  throttle_mins:
    type: number
    default: 60

runs:
  using: "composite"

  steps:
    - uses: actions/github-script@v6
      with:
        script: |
          const workloadWorkflow = "${{ inputs.workflow_id }}";
          const branchesToService = "${{ inputs.branches }}".split(',').map(x => x.trim())

          const inProgressWorkflowRunListResponse = await github.rest.actions.listWorkflowRuns({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: workloadWorkflow,
            per_page: 0,
            exclude_pull_requests: true,
            status: "in_progress"
          });

          const queuedWorkflowRunListResponse = await github.rest.actions.listWorkflowRuns({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: workloadWorkflow,
            per_page: 0,
            exclude_pull_requests: true,
            status: "queued"
          });

          const activeWorkflowRunCount =
            inProgressWorkflowRunListResponse.data.total_count
            + queuedWorkflowRunListResponse.data.total_count;

          if (activeWorkflowRunCount) {
            console.log(
              `terminating: ${inProgressWorkflowRunListResponse.data.total_count} workflow runs "in_progress", `
              + `${queuedWorkflowRunListResponse.data.total_count} "queued"`);

            return 0;
          }

          console.log("branchesToService=" + JSON.stringify(branchesToService));

          const completedWorkflowRunListResponse =
            await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: workloadWorkflow,
              per_page: branchesToService.length,
              exclude_pull_requests: true,
              status: "completed"
            });

          const completedWorkflowRuns = completedWorkflowRunListResponse.data.workflow_runs;

          let branchBacklog =
            branchesToService.filter(
              b => {
                if (!completedWorkflowRuns.find(wr => wr.head_branch == b)) {
                  console.log(`branchBacklog(\"${b}\"): OK, workflow was not run for this branch during the last ${branchesToService.length} runs`);
                  return true;
                }

                console.log(`branchBacklog(\"${b}\"): workflow has already been run for this branch during the last ${branchesToService.length} runs`);
                return false;
              });

          if (completedWorkflowRuns.length) {
            const lastCompletedRunBranch = completedWorkflowRuns[completedWorkflowRuns.length-1].head_branch;
            console.log(`branchBacklog(\"${lastCompletedRunBranch}\"): enqueueing in case all branches from branchesToService have been run already`);

            branchBacklog.push(lastCompletedRunBranch);
          }

          console.log("branchBacklog=" + JSON.stringify(branchBacklog));

          let branchesEligibleForScheduling =
            branchBacklog.filter(
              b => {
                const lastWfRun = completedWorkflowRuns.find(wr => wr.head_branch == b);
                const minsSinceLastWfRun = lastWfRun && ((new Date() - new Date(lastWfRun.created_at)) / 1000 / 60);
                if (!minsSinceLastWfRun) {
                  console.log(`branchesEligibleForScheduling(\"${b}\"): OK; no recent workflow run`);
                  return true;
                }

                if (minsSinceLastWfRun > ${{ inputs.throttle_mins }}) {
                  console.log(`branchesEligibleForScheduling(\"${b}\"): OK; last workflow run was initiated more than ${{ inputs.throttle_mins }} mins ago (${lastWfRun.created_at})`);
                  return true;
                } else {
                  console.log(`branchesEligibleForScheduling(\"${b}\"): skipping; last workflow run was initiated less than ${{ inputs.throttle_mins }} mins ago (${lastWfRun.created_at})`);
                  return false;
                }
              });

          console.log("branchesEligibleForScheduling=" + JSON.stringify(branchesEligibleForScheduling));

          let nextBranchToService = branchesEligibleForScheduling[0] ?? null;

          if (nextBranchToService) {
            console.log(`scheduling a new ${workloadWorkflow} workflow run to service \"${nextBranchToService}\"`);

            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: workloadWorkflow,
              ref: nextBranchToService
            });
          }
